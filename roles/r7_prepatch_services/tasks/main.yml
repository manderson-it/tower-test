---
# Query running services and save output to local file system
# vars:
# servicesrunning: for in-flight execution of both pre and post services Ansible roles (this var is unavailable if you only run the post services role)
# servicesenabled: for in-flight execution of both pre and post services Ansible roles (this var is unavailable if you only run the post services role)
# preservicesrunning: templated var to var-file on target system but has to be fetched in the post role to Ansible controller (this var is available if you only run the post services role)
# preservicesenabled: templated var to var-file on target system but has to be fetched in the post role to Ansible controller (this var is available if you only run the post services role)
- name: Create Ansible Temp Directory
  file:
    path: "{{ ansible_linux_folder }}"
    state: directory

- name: Create Snapshot Archive Directory
  file:
    path: "{{ ansible_linux_archive_folder }}"
    state: directory

- name: Gather service facts
  service_facts:

- name: Build a YAML file of all running services
  template:
    src: "servicesrunning.j2"
    dest: "{{ ansible_linux_folder }}/{{ file_prerunning }}.yml"
  #with_dict: "{{ services }}"
  #when: item.value.state == "running"

- name: Build a list of all running services
  set_fact:
    servicesrunning: "{{ servicesrunning }} + [ '{{ item.value.name }}' ]"
  with_dict: "{{ services }}"
  when: item.value.state == "running"
  vars:
    servicesrunning: []

- name: Build a YAML file of all enabled services
  template:
    src: "servicesenabled.j2"
    dest: "{{ ansible_linux_folder }}/{{ file_preenabled }}.yml"
  with_dict: "{{ services }}"
  when:
    - item.value.status == "enabled"
    - item.value.name is not regex("@\.service$")

# due to systemd possibility that static unit file is simply used by another unit it cannot run or be enabled by itself and should therefore be filtered out
- name: Build a list of all enabled services
  set_fact:
    servicesenabled: "{{ servicesenabled }} + [ '{{ item.value.name }}' ]"
  with_dict: "{{ services }}"
  when: 
    - item.value.status == "enabled"
    - item.value.name is not regex("@\.service$")
  vars:
    servicesenabled: []

- name: Construct datetime file suffix
  set_fact:
    filesuffix: "{{ ansible_date_time.day }}{{ ansible_date_time.month }}{{ ansible_date_time.year }}T{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"

- name: Copy PrePatchServices file to archive folder with suffix -ddMMyyyyTHHmmss 
  copy:
    src: "{{ ansible_linux_folder }}/{{ item }}.yml"
    dest: "{{ ansible_linux_archive_folder }}/{{ item }}-{{ filesuffix }}.yml"
    remote_src: yes
  loop:
    - "{{ file_prerunning }}"
    - "{{ file_preenabled }}"

# injected in second play
#- pause:
#    prompt: "Before continuing stop crond and chrony to create a delta"
