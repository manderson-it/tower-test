---
# Query running services and save output to local file system
- name: Create Ansible Temp Directory
  file:
    path: "{{ ansible_linux_folder }}"
    state: directory

- name: Create Snapshot Archive Directory
  file:
    path: "{{ ansible_linux_archive_folder }}"
    state: directory

# (1) Write current service facts to disk
# (2) Archive same file with -ddMMyyyyTHHmmss suffox to archive folder
- name: Get All Services Pre-Snapshot
  service_facts:

- name: with_dict - output name Try to loop or query with when
  debug:
    msg: "item.value is {{ item.value.name }}"
  with_dict: "{{ services }}"
  when: item.value.state == "running"

- set_fact:
    collectionname: "{{collectionname|default({}) | combine({item.value.name: item.value.state})}}"
  with_dict: "{{ services }}"
  when: item.value.state == "running"

- name: debug constructed fact
  debug:
    var: collectionname

- name: Build a list of all running services
  set_fact:
    servicesrunning: "{{ servicesrunning }} + [ '{{ item.value.name }}' ]"
  with_dict: "{{ services }}"
  when: item.value.state == "running"
  vars:
    servicesrunning: []

- name: debug constructed list fact
  debug:
    var: servicesrunning

- name: loop over constructed list fact
  debug:
    msg: "{{ item }}"
  with_items: "{{ servicesrunning }}"

- name: Make sure services that are supposed to be running are actually running
  service:
    name: "{{ item }}"
    state: started
  with_items: "{{ servicesrunning }}"

# due to systemd possibility that static unit file is simply used by another unit it cannot run or be enabled by itself and should therefore be filtered out
- name: Build a list of all enabled services
  set_fact:
    servicesenabled: "{{ servicesenabled }} + [ '{{ item.value.name }}' ]"
  with_dict: "{{ services }}"
  when: 
    - item.value.status == "enabled"
    - item.value.name is not regex("@\.service$")
  vars:
    servicesenabled: []

- name: debug constructed list fact
  debug:
    var: servicesenabled

- name: loop over constructed list fact
  debug:
    msg: "{{ item }}"
  with_items: "{{ servicesenabled }}"

- name: Make sure services that are supposed to be enabled are actually enabled
  service:
    name: "{{ item }}"
    enabled: yes
  with_items: "{{ servicesenabled }}"

# works without to_nice_json results in without u but on one line
#- name: Write All Services Pre-Snapshot to disk
#  copy:
#    content: "{{ ansible_facts.services | to_nice_json }}"
#    dest: "{{ ansible_linux_folder }}/PrePatchServices-copymodule.Csv"
#    remote_src: yes

#- name: Write All Services Pre-Snapshot to disk
#  shell: echo -e "{{ ansible_facts.services | to_nice_json }}" > {{ ansible_linux_folder }}/PrePatchServices.Csv

- name: Write All Services Pre-Snapshot to disk (servicesrunning)
  copy:
    content: "{{ servicesrunning }}"
    dest: "{{ ansible_linux_folder }}/PrePatchServices-servicesrunning"
    remote_src: yes

- name: Write All Services Pre-Snapshot to disk (servicesenabled)
  copy:
    content: "{{ servicesenabled }}"
    dest: "{{ ansible_linux_folder }}/PrePatchServices-servicesenabled"
    remote_src: yes

- name: Construct datetime file suffix
  set_fact:
    filesuffix: "{{ ansible_date_time.day }}{{ ansible_date_time.month }}{{ ansible_date_time.year }}T{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"

- name: Copy PrePatchServices file to archive folder with suffix -ddMMyyyyTHHmmss 
  copy:
    #src: "{{ ansible_linux_folder }}/PrePatchServices.Csv"
    src: "{{ ansible_linux_folder }}/{{ item }}"
    dest: "{{ ansible_linux_archive_folder }}/{{ item}}-{{ filesuffix }}"
    remote_src: yes
  with_items:
    - "PrePatchServices-servicesrunning"
    - "PrePatchServices-servicesenabled"

###########################################################
###########################################################
###########################################################
# 1 Read in files from disk as list
# 2 Create diff between files
# 3 Execute on the diff (start services and set to enabled)
- name: Read list from file
  shell: cat "{{ ansible_linux_folder }}/PrePatchServices-servicesrunning"
  register: postservicesrunning

- name: Show output from read file contents
  debug:
    var: postservicesrunning

- name: Show output from read file contents
  debug:
    var: postservicesrunning.stdout

- name: iterate over list - Show output from read file contents
  debug:
    msg: "{{ item }}"
  with_items: postservicesrunning.stdout

